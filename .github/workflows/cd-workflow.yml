name: CD with Gradle and Docker

on:
  push:
    branches: [ 'main', 'dev' ]
  pull_request:
    branches: [ 'main', 'dev' ]

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: ‚òïÔ∏è set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: github
          settings-path: ${{ github.workspace }}

      - name: üëèüèª grant execute permission for gradlew
        run: chmod +x gradlew

      - name: üêò build with Gradle (without test)
        run: ./gradlew clean build -x test --stacktrace

      - name: üê≥ Docker build & push
        run: |
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}

      - name: üöÄ deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          envs: GITHUB_REF,IMAGE_TAG
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            set -e

            if [ "${GITHUB_REF##*/}" = "dev" ]; then
              echo "üå± DEV branch detected: deploying to port 8008"
              sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}
              sudo docker stop pleiades-dev  || true
              sudo docker rm   pleiades-dev  || true

              sudo docker run -d \
                -p 8008:8080 \
                --name pleiades-dev \
                -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
                -e KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }} \
                -e KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }} \
                -e NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }} \
                -e NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }} \
                -e SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }} \
                -e SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }} \
                -e SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }} \
                -e FRONT_ORIGIN=${{ secrets.FRONT_ORIGIN }} \
                -e IPFS_URL=${{ secrets.IPFS_URL }} \
                -e SERVER_DOMAIN=${{ secrets.SERVER_DOMAIN }} \
                ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}

              echo "‚úÖ DEV deploy complete (http://<EC2 IP>:8008)"
              sudo docker image prune -f
              exit 0
            fi

            echo "üîé Determine next color / port"
            if sudo docker ps -a --filter "name=pleiades-blue" --format '{{.Names}}' | grep -q pleiades-blue; then
              NEXT_COLOR=green
              TARGET_PORT=8001
              OLD_COLOR=blue
              OLD_PORT=8000
            else
              NEXT_COLOR=blue
              TARGET_PORT=8000
              OLD_COLOR=green
              OLD_PORT=8001
            fi

            echo "üçÄ Deploying $NEXT_COLOR container on port $TARGET_PORT"
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}

            sudo docker rm -f pleiades-${NEXT_COLOR} 2>/dev/null || true
            sudo docker run -d \
              -p ${TARGET_PORT}:8080 \
              --name pleiades-${NEXT_COLOR} \
              --label color=${NEXT_COLOR} \
              -e JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }} \
              -e KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }} \
              -e KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }} \
              -e NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }} \
              -e NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }} \
              -e SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }} \
              -e SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }} \
              -e SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }} \
              -e FRONT_ORIGIN=${{ secrets.FRONT_ORIGIN }} \
              -e IPFS_URL=${{ secrets.IPFS_URL }} \
              -e SERVER_DOMAIN=${{ secrets.SERVER_DOMAIN }} \
              ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_IMAGE }}:${{ env.IMAGE_TAG }}

            echo "‚è≥ Waiting for health check‚Ä¶"
            HEALTH_URL="http://localhost:${TARGET_PORT}/actuator/health"
            for i in {1..20}; do
              if curl -fs ${HEALTH_URL} | grep -q '"status":"UP"'; then
                echo "‚úÖ Health check passed"
                break
              fi
              sleep 3
            done

            if [ "$i" = "20" ]; then
              echo "‚ùå Health check failed, rolling back"
              sudo docker logs pleiades-${NEXT_COLOR} --tail 50
              sudo docker stop pleiades-${NEXT_COLOR}
              sudo docker rm   pleiades-${NEXT_COLOR}
              exit 1
            fi

            echo "üîÑ Switching traffic to ${NEXT_COLOR}"
            echo "upstream pleiades_backend { server 127.0.0.1:${TARGET_PORT}; }" | sudo tee /etc/nginx/conf.d/active_upstream.conf
            sudo nginx -s reload
            echo "üßπ Shutting down old container"
            sudo docker stop pleiades-${OLD_COLOR} || true
            sudo docker rm   pleiades-${OLD_COLOR} || true
            sudo docker image prune -f
